/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.OSCALComponentDefinition;
import io.swagger.model.OSCALComponentDefinitionComponent;
import io.swagger.model.OSCALComponentDefinitionComponentControlImplementation;
import io.swagger.model.OSCALComponentDefinitionUpdateExample;
import io.swagger.model.OSCALRole;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-02-24T08:30:46.962624+01:00[Europe/Berlin]")
@Validated
public interface ComponentDefinitionsApi {

    @Operation(summary = "Adds a new control implementation to a component in an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition or component not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addComponentControlImplementationToComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Component ID to be updated in the component definition", required=true, schema=@Schema()) @PathVariable("componentId") String componentId, @Parameter(in = ParameterIn.DEFAULT, description = "OSCAL component control implementation to be added", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinitionComponentControlImplementation body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Adds a new OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/component-definitions",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addComponentDefinition(@Parameter(in = ParameterIn.DEFAULT, description = "OSCAL component definition to be added", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinition body);


    @Operation(summary = "Adds a new component to an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addComponentToComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.DEFAULT, description = "OSCAL component to be added", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinitionComponent body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Associates a party with an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition or party not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/parties/{partyId}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> addPartyToComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Party ID to be associated with the component definition", required=true, schema=@Schema()) @PathVariable("partyId") String partyId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Associates a party with role within an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition, role, or party not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/responsible-parties/{roleId}/parties/{partyId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> addPartyToComponentDefinitionRole(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Role ID for the party to be associated with within the component definition", required=true, schema=@Schema()) @PathVariable("roleId") String roleId, @Parameter(in = ParameterIn.PATH, description = "Party ID to be added to the role within the component definition", required=true, schema=@Schema()) @PathVariable("partyId") String partyId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Adds a new role to an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/roles",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addRoleToComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.DEFAULT, description = "OSCAL role to be added", required=true, schema=@Schema()) @Valid @RequestBody OSCALRole body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Deletes an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID to delete", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Searches for OSCAL component definitions by name", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OSCALComponentDefinition.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/component-definitions/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OSCALComponentDefinition>> findComponentDefinitionsByName(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Terms to search for in component definition names" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "query", required = true) String query);


    @Operation(summary = "Finds an OSCAL component definition by ID", description = "Returns a single OSCAL component definition", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OSCALComponentDefinition.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OSCALComponentDefinition> getComponentDefinitionById(@Parameter(in = ParameterIn.PATH, description = "ID of component definition to return", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId);


    @Operation(summary = "Returns all OSCAL component definitions", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OSCALComponentDefinition.class)))) })
    @RequestMapping(value = "/component-definitions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OSCALComponentDefinition>> getComponentDefinitions();


    @Operation(summary = "Removes a component control implementation from an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition, component, or control implementation not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations/{componentControlImplementationId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeComponentControlImplementationFromComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Component ID to be removed from the component definition", required=true, schema=@Schema()) @PathVariable("componentId") String componentId, @Parameter(in = ParameterIn.PATH, description = "Component control implementation ID to be removed from the component definition", required=true, schema=@Schema()) @PathVariable("componentControlImplementationId") String componentControlImplementationId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Removes a component from an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition or component not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components/{componentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeComponentFromComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Component ID to be removed from the component definition", required=true, schema=@Schema()) @PathVariable("componentId") String componentId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Removes a party from an OSCAL component definition", description = "Removes the given party from the given component definition.  This should also result in references under other parts of the schema such as   component responsible roles being removed. ", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition or party not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/parties/{partyId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removePartyFromComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Party ID to be associated with the component definition", required=true, schema=@Schema()) @PathVariable("partyId") String partyId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Removes a party from a role within an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition, role, or party not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/responsible-parties/{roleId}/parties/{partyId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removePartyFromComponentDefinitionRole(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Role ID within the component definition the party should be removed from", required=true, schema=@Schema()) @PathVariable("roleId") String roleId, @Parameter(in = ParameterIn.PATH, description = "Party ID to be removed from the role within the component definition", required=true, schema=@Schema()) @PathVariable("partyId") String partyId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Removes a role from an OSCAL component definition", description = "Removes the given role from the given component definition.  This should also result in references under other parts of the schema such as responsible parties being removed. ", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition or role not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/roles/{roleId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeRoleFromComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component Definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Role ID to be removed from the component definition", required=true, schema=@Schema()) @PathVariable("roleId") String roleId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Updates an existing control implementation in a component in an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition, component, or control implementation not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations/{componentControlImplementationId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateComponentControlImplementationInComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Component ID to be updated in the component definition", required=true, schema=@Schema()) @PathVariable("componentId") String componentId, @Parameter(in = ParameterIn.PATH, description = "Component control implementation ID to be updated in the component definition", required=true, schema=@Schema()) @PathVariable("componentControlImplementationId") String componentControlImplementationId, @Parameter(in = ParameterIn.DEFAULT, description = "OSCAL component control implementation to be updated", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinitionComponentControlImplementation body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Updates an existing OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "ID of component definition to return", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.DEFAULT, description = "Component definition to be updated", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinitionUpdateExample body);


    @Operation(summary = "Updates an existing component in an OSCAL component definition", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Component Definition" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Component definition not found") })
    @RequestMapping(value = "/component-definitions/{componentDefinitionId}/components/{componentId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateComponentInComponentDefinition(@Parameter(in = ParameterIn.PATH, description = "Component definition ID", required=true, schema=@Schema()) @PathVariable("componentDefinitionId") String componentDefinitionId, @Parameter(in = ParameterIn.PATH, description = "Component ID to be updated in the component definition", required=true, schema=@Schema()) @PathVariable("componentId") String componentId, @Parameter(in = ParameterIn.DEFAULT, description = "OSCAL component to be updated", required=true, schema=@Schema()) @Valid @RequestBody OSCALComponentDefinitionComponent body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);

}

