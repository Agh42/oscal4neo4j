/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.OSCALCatalog;
import io.swagger.model.OSCALCatalogUpdateExample;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-02-24T08:30:46.962624+01:00[Europe/Berlin]")
@Validated
public interface CatalogsApi {

    @Operation(summary = "Adds a new OSCAL control catalog", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/catalogs",
        consumes = { "application/json", "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addCatalog(@Parameter(in = ParameterIn.DEFAULT, description = "OSCAL catalog object to be added", required=true, schema=@Schema()) @Valid @RequestBody OSCALCatalog body);


    @Operation(summary = "Deletes an OSCAL control catalog", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Catalog not found") })
    @RequestMapping(value = "/catalogs/{catalogId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCatalog(@Parameter(in = ParameterIn.PATH, description = "Catalog ID to delete", required=true, schema=@Schema()) @PathVariable("catalogId") String catalogId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Searches for OSCAL control catalogs by name", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OSCALCatalog.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/catalogs/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OSCALCatalog>> findCatalogsByName(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Terms to search for in catalog names" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "query", required = true) String query);


    @Operation(summary = "Finds an OSCAL control catalog by ID", description = "Returns a single OSCAL control catalog", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OSCALCatalog.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Catalog not found") })
    @RequestMapping(value = "/catalogs/{catalogId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OSCALCatalog> getCatalogById(@Parameter(in = ParameterIn.PATH, description = "ID of catalog to return", required=true, schema=@Schema()) @PathVariable("catalogId") String catalogId);


    @Operation(summary = "Returns all OSCAL control catalogs", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OSCALCatalog.class)))) })
    @RequestMapping(value = "/catalogs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<OSCALCatalog>> getCatalogs();


    @Operation(summary = "Replaces an existing OSCAL catalog", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Updated catalog"),
        
        @ApiResponse(responseCode = "404", description = "Catalog not found"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "415", description = "Unsupported media type") })
    @RequestMapping(value = "/catalogs/{catalogId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> replaceCatalog(@Parameter(in = ParameterIn.PATH, description = "ID of catalog to replace.", required=true, schema=@Schema()) @PathVariable("catalogId") String catalogId, @Parameter(in = ParameterIn.DEFAULT, description = "Catalog object to be replaced.", required=true, schema=@Schema()) @Valid @RequestBody OSCALCatalog body);


    @Operation(summary = "Updates an existing OSCAL control catalog", description = "", security = {
        @SecurityRequirement(name = "oscal_auth", scopes = {
            "write:catalogs",
"read:catalogs",
"write:profiles",
"read:profiles",
"write:componentDefinitions",
"read:componentDefinitions",
"write:ssps",
"read:ssps",
"write:parties",
"read:parties"        })    }, tags={ "OSCAL Catalog" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Catalog not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/catalogs/{catalogId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateCatalog(@Parameter(in = ParameterIn.PATH, description = "ID of catalog to return", required=true, schema=@Schema()) @PathVariable("catalogId") String catalogId, @Parameter(in = ParameterIn.DEFAULT, description = "Catalog object to be updated", required=true, schema=@Schema()) @Valid @RequestBody OSCALCatalogUpdateExample body);

}

